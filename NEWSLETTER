2007/02 ========================================================================

Last month I started to offer extensions from the buzztard project for gstreamer
inclusion [1][2][3][4]. I belive that the idea behind is generic enough to
support them. The discussion and interest has been relative low so far :( I'll
probably interpret this then as agreement and commit the changes. The preset
handling has been improved. The buzz presets can be saved now too and meta data
(comments) can be edited as well. The generic implementation also shapes up.

As my solution for [5] seems to be disliked I went for a hack :( I now hide the
treeview headers and simulate my own. Now the header widgets work. While working
on this I also made the label-brower function. It allows to jump to labels in
the timeline.

initial sample playback in wavetable

better buzz song compatibillity + test cases

maemo porting

--

[1] http://bugzilla.gnome.org/show_bug.cgi?id=396774
[2] http://bugzilla.gnome.org/show_bug.cgi?id=396779
[3] http://sourceforge.net/mailarchive/forum.php?thread_id=31560403&forum_id=5947
[4] http://sourceforge.net/mailarchive/forum.php?thread_id=31471237&forum_id=5947

[5] http://bugzilla.gnome.org/show_bug.cgi?id=338271

2007/01 ========================================================================

In last month news I wrote about the gst element check. Now we also have the
respective UI parts. The apps check if the have mandatory and optional elements
available. If elements are missing the user will see an explanation which are
missing and what for they are needed. For optional elements its up to the user
to decide if that is okay or if they should be installed. In the future we can
make use of the new gstreamer libgimmicodec mechanism, to download and install
missing elements on the fly.

I also continued working on the preset support. The interface got some default
implementation, e.g. to generate a randomized preset. The buzzmachine wrapper
implements most of the interface. We can load presets, rename and remove them.
The later two actions are not yet persistent - I need to implement saving still.
On the UI side I implemented the preset pane for the machine settings window. I
decided not to copy the buzz UI here. I should post a screenshot soon.

I also went over the todo: comments in the source once again and implemented
things here and there. Now one can add/removed tracks for polyphonic machines.
Also adding/removing tracks in the sequence is now working fine and updates all
UI items properly.

Right now I am also giving the dialogs an overhaul. All got a default action
(e.g. press enter to dismiss). They also get moved into a separate object each.
This helps to test them standalone and to auto-screen-shot them during the test
runs.

Finally I spend some time configuring our buildbot [1]. For the first time all
steps are green. The machine the test run on does not have X11 running. Still we
can run UI tests and do screenshots of all windows. The magic can be found in a
few helper methods that pick a free display number, spawn a Xvfb server and
setup a GdkDisplay for gtk+. The buildbot stuff definitely rocks! I hope we can
extend this in the future - anyone found a way to trigger builds from
sourceforge.net cvs commits (via commit hook)? Make me happy and mailto:
ensonic (at) users (dot) sf (dot) net.

[1] http://141.57.8.70:8010/

2006/12 ========================================================================

This month we fleshed out the planning for 0.2. From now on we like to release
often and regularly. We defined a lot of small gtk UI tasks. If you like to
help, we welcome you with open arms on irc://irc.quakenet.org/#buzztard.

First changes after the release are already in CVS. I worked on the buzzmachine
emulation. I can now handle some more plugins. We need to update and re-run the
coverage tests to get a clear picture. Regarding wrapper gst-elements we have a
bug in gstreamer bugzilla that needs some work [1].

I also worked on the UI a bit more. The machine preferences and properties now
have some reasonable size. Its not easy to get a default size for generated UIs.
Right now I clamp the height to the screen-height minus some extra. Would be
nice to have some way to figure how much space one should leave for upper/lower
panels. I also needed to add a workaround for the window-width wobble. If you
had sliders with labels in the UI, the width was dependent on the label with.I
can't really know the maximum width beforehand easily, so I had to set a default
width. Good enough for now.

I also started two new interfaces for gstreamer elements. First one is about the
help documentation of the element. Buzztard can show the docs of buzzmachines or
the gtk-doc of native element already. The second iface is about the preset
handling. Implementing that for the buzzmachines is next on the todo list.

Finally I also started to put some gstreamer element check into the core lib.
During configure we can't check for installed elements and it wouldn't make
sense anyway. So we are going to check for mandatory and optional elements at
application start. Checking works fine already. Now I need to add the UI dialog
for the missing elements report.

Have a nice christmas month - we'll get back to you next year.

[1] http://bugzilla.gnome.org/show_bug.cgi?id=350477

2006/11 ========================================================================

Finally! We did release 0.1 "genesis". In June 2002 we registered the project
and started thinking. For more than year nothing big happened. In February 2004
the first GStreamer example code landed in CVS. That was using GStreamer 0.8.
Then the metamorphosis began: using GObject, adding unit tests, API docs, user
docs and so on. In August 2005 came the switch to GStreamer 0.10. In summer 2006
our team grew from 2 to 4 developers. The whole project already contains 139000
lines of code.

Even though the current code is maybe a bit rough and the applications are not
that usable yet, we're confident that new releases will follow quickly and bring
the missing pieces. If you want it happen faster, join the project. We have lots
of tasks, some with a fleshed out concept, some merely ideas, some suitable for
not so experienced developers, so quite tricky. Give us a visit on
irc://irc.quakenet.org/buzztard.

2006/10 ========================================================================

Finally I found some time to work one one thing that was getting on my nerves.
For the unit tests we now have a BtTestSettings class. This allows us to
simulate all sort of settings. The other benefit is that we don't need to make
sure that we don't modify user settings during test runs. And we get not hit by
my favourite GConf nastyness anymore [1].

Next I did a lot more bugfixing in the UI - or lets call it implementing
previously unimplemented stuff. Added some more tooltips here and there, syncing
data displays and so on.

Waffel spend some time so set up a buildmaster and a buildslave. This way our
code gets rebuild every 6 hours. The 6 hours cycle has two reasons - our
cvshook-script (from fdo) does not run on sf.net and the sf.net anon-cvs has a
big delay. Anyway even the current setup revealed some bugs, where some of them
are already fixed.

Tommi fights with cairo to build a real pattern editor widget for us. Hope we
can post some screenshots from it soon.

[1] http://bugzilla.gnome.org/show_bug.cgi?id=316331

2006/09 ========================================================================

Lots of news this time. Also this time I welcome another team member on board -
Tommi 'nbd' Sakari Uimonen. His first action was a code review of the core lib
and a big patch that const'ified it more. By giving him a quick demo of the
application we also uncovered a lot of bugs. Next nbd will work on a pattern
editor widget.

Berzerka implemented song-length changing. The list will be dynamically expanded
as one scrolls down. Also keyboard shortcuts are coming to set length and move
the loop area.

While we were working on the sequence display, we fixed the step filtering for
different rhythms and also implemented many details for rhythm support (other
than 4/4). Speaking of the GUI - lots of changes there. The machine view looks a
bit nicer and has some zoom and layout fixes. Zoom fit was a bit harder than
expected and seems to be still not always be correct. The context menu to add
machines is now hierarchical. In the status bar we now show CPU usage. At least
during development this is quite useful.

Lots of code has been added to handle error situations better. If you load songs
with missing machines or samples, these components will be tracked. After
loading we present a report of missing elements. Later we can add machine
download or to specify a new location if the sample has been moved or renamed.

Many task were done to prepare a first release. We now have a nice about dialog.
It also shows the latest release notes. This dialog will always be shown once
after updating. The user guide is more complete. German language catalogues are
complete. Finally a lot of cruft code has been removed.

I also worked a bit on the buzz machine emulation. It now also support stereo
machines (need more work on the application side). The example buzz songs have
been fixed. The now all play again. The gstreamer buzzmachine plugin generates
better parameter names. It also maps some parameters to enums. Instead with a
slider, they are presented as a dropdown then.
