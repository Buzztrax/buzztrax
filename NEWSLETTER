2008/10 ========================================================================

* translation project http://translationproject.org/latest/buzztard/

2008/09 ========================================================================

Out of some irc conversation, I gave implementing synced meters a go. Until so
far level and spectrum meters in buzztard were ahead of time. The reason is that
gstreamer tells me about the values once they are computed, but that's not when
the actual data segment gets played. Luckily the message has a timestamp. So all
it needs is to sync drawing with the audio sink. MikeS gave me some good
pointers on irc. It wasn't that straight forward. I found and fixed a bug in 
level meter plugin so that it now puts useful timestamps on messages when it
play loops. It works really great now.

gtk_widget_grab_focus() is a nasty function. It asserts when the widget is not
mapped/realized and steals the focus in any case. This is problematic if you
have tabs and update widgets when things changed. I now have a wrapper added
that does the extra checks. Wonder if that would be a good change for upstream.

I did lot of testing with real buzz songs and machines. I have now about 80
original plugins in use. Real testing always leads to some good fixes :) We now
add an empty pattern by default when adding new source machines (like buzz did).
I also noticed that bpm/tpb information was not loaded from buzz songs. This is
now fixed (also master volume was missing). After that I spotted that most bpm
tempi did not work well. Now timing precision is much better.

A big recommendation to everyone. Pick a decent prefix for your project. I've
been a bit blue eyed and had chosen 'bt'. Part of my package is a core library
called libbtcore. Now unfortunately ktorrent did the same mistake and have a
libbtcore (bt stands for bittorrent there). As neither of them are really
general purpose they should be uniquely named. I analyzed all files I install
and went thought the great pains of renaming everything - libs, binaries, docs
includes, pkg-config files, desktop files and so on. Hope I never have to do 
that ever again. I also filed a bug for ktorrent [1] so that they can fix it
before its causing problems. Interesting how they dealt with the report - "I was
first with libbtcore - RESOLVED AS WONTFIX". Interestingly I was 1.5 years
earlier, but that wasn't the point at all.

[1] http://bugs.kde.org/show_bug.cgi?id=170674

2008/08 ========================================================================

Wow, July went fast. I spend most time with my family. Still a few news from the
development front. I worked mostly on wavetable view. It now features more 
proper sample playback. I wrote a memory audio source for GStreamer. It supports
forward and backward playback. This is needed for e.g. ping-pong loops. Also now
changing things takes effect while a sample plays. Our waveform widget also
shows a playback pointer and loop markers. I also got around to unify and merge
duplicated note conversion code. You know, when you've copied something the 3rd
time, its time to refactor.

Earlier this month I refactored the song-io plugin API a bit. It has now more
metadata. This helps the UI to setup file and recent filters. Unfortunately I
had to find out that the mime-type detection in glib was broken [1]. Its at
least fixed in trunk. No idea since when it actually worked. As a workaround I
am now adding "*.xml" to the filters.

[1] http://bugzilla.gnome.org/show_bug.cgi?id=541236

2008/07 ========================================================================

Some very visible changes this month - svg machine canvas icons. For that I
needed to add better icon theme support. All icons are now themeable and colors
are matched with the theme. Machines now have tiny level-meters embedded in the
icon.

I also found a solution for slow start of playback in complexer songs. Data-
format-negotiation is not deterministic in all cyclic gstreamer graphs. Proposed
patches are attached to Bug 540645 [1].

Finally I got around implementing support for a zip based song format. This
can contain binaries (like the samples being used). The loader is based on
libgsf [2], which turned out to be a pleasant experience.

I also added filters to the load and save file-choosers and to the recent-chooser
in the new recent menu. Still fighting with the filter not doing a precise
detection [3].

Next on my todo list is refactoring the song io plugin api a bit. Right now
there is too much hard-coded data (like mime-types, format names, extensions). 

[1] http://bugzilla.gnome.org/show_bug.cgi?id=540645
[2] http://directory.fsf.org/project/libgsf/
[3] http://bugzilla.gnome.org/show_bug.cgi?id=541236

2008/06 ========================================================================

In the previous month I worked further on sample support. Samples are played now
from memory and can be transposed. Also the buzz song import plugin got sample
support added. This means I can load now a big share of my existing songs. While
testing those I could fix some more issues with plugin initialisation and those
song sound like in original buzz now. Yah, we're getting there.

The current version also brings some eye-candy, Marc (aka deloun) drew us great
icons in tango style. I reworked the code to load all icons via theme mechanism.
I also allocate other color based on chosen theme now. One thing left for June
is to start using the svg on the canvas.

2008/05 ========================================================================

As can be seen on our roadmap [1] sample support is scheduled for 0.4. As this
is the major feature, we started working on it. I have to say that building
buzztard on top of GStreamer was definitely the right thing to do. We can now
load whatever GStreamer can handle. FSM did a nice cairo-based waveform widget.
Right now I am working on the code that allows plugins to access the wavetable.
It will hopefully be ready real soon.

Besides that I've started to restructure the gst-buzztard package a bit further.
I also plan to merge the buzz wrapper plugin into it. The aim is to reduce the
number of packages that one needs to build.

[1] http://www.buzztard.org/index.php/Roadmap

2008/04 ========================================================================

After the release I demoed it some friends and obviously found some issues. Now I
spend the rest of the month tracking then. Its mostly ref-counts issues. Why are
the so nasty? Well unlike memory leaks, they are anonymous. Memory is allocated
once and should be paired by one free. The id of the resource is the memory
address. Now every ref should be paired by an unref, but all the refs and unrefs
share the same id (address of the object). So how to figure which ref is not
having the unref? Refdbg [1] can trace object and gather backtraces for
ref-count operations. So one has to go through the list one by one, remove pairs
and study whats left. Its not easy, but it works. 
Now why is this so important. If the refcount never reaches 0, the object is not
disposed and occupies memory (until the application exits). Under valgrind it
would appear under reachable memory usually. For most apps it has no immediately
visible effect. For gstreamer app it has. In buzztard I do dynamic stuff with
pipelines, like adding and removing elements. If you get the ref-counting wrong.
The element is unlinked but not disposed. If the pipeline is set to PLAYING one
gets data flow errors. But then its not a gstreamer only problem. E.g. icon theme
pixbufs in gtk. If the are not unrefed, gtk cannot unload the theme. Means if
you try a bunch of themes, none of the is unloaded if even just one panel
applet has a ref-count issue. The sad thing is that the gnome libraries have
quite some ref-count leaks. I've started to track and fix them as its hard to
see something within all this noise [2][3].

I've released buzztard-0.3.1 with the fixes. A few more developments to mention:
Waffel started a demo for the zip loader based on libgsf, Deloun made great svg
designs for the machine view canvas and the tabs and Herzi send me a patch to
add native scrolling in the pattern editor. Now back to new features, yah!

[1] http://refdbg.sf.net
[2] http://bugzilla.gnome.org/show_bug.cgi?id=525815
[3] http://bugzilla.gnome.org/show_bug.cgi?id=66513

2008/03 ========================================================================

The Linux Audio Conference 2008 was nice once again. Good talks, interesting
know-how exchange and of course opportunities for testing and hacking on
buzztard.

I have improved the playback engine a bit. It now uses less additional latency.
Still one get much lower latency by using jack, instead of pulse audio
(currently experimenting to lower latency there too).

The pattern editor got better gtk+ theme support (especially on dark ones) and
also tries to use the default monospace font and font-size to better match with
the overall look of your desktop. I implemented blending value ranges and
randomization of ranges. FSM implemented more keyboard shortcuts. I added value
descriptions to the status bar where the plugin supports it.

Also the sequence editor got some todo-fixing. The sequence was never
horizontally scrollable (adding columns would force the window to be wider). The
M,S,B buttons are now color shaded when pressed to give better visual clues.
Finally also the position unit switcher is functional (ticks/time) and the label
navigator gets properly updated. Lots of small things I never got around until
now

Level meters in sequence and analyzer windows are now more lively and precise.
Having several analyzers open now also produces the expected results.

The buzz song importer got further fixes. It seems to load all of my songs just
fine now.

Some improvements also on the buzz emulation side. More machines load and work.
We have a nice testsuite with html reports now. I spotted some issues which will
fix more machines. Will try to implement this next.

If nothing urgent comes up. I'll prepare the release in the coming days. Stay
tuned.

2008/02 ========================================================================

We're heading for a release. There is a few more features that we'd like to
finalize. Then its time for testing and this is were *you* can help.
Featurewise buzztard improved nicely this month. I improved stereo support.
We now have new look for the wires. They show animated volume levels and
panorama positions. Both volume and panorama can be adjusted via popup-sliders.I
like this a lot more that how it works in buzz. There it was a bit confusing in
some cases (not clearly indicating which connections a panorama setting would
affect). As an extra bonus, buzztard does stereo balance on stereo connections.

I also updated the buzz song importer to make use and correctly import panorama
and volume. Now also the master-volume is mapped to the scale used in buzztard.

FSM worked on the pattern widget. It supports variable cursor stepping (going
down several lines at once) and selection. I added column/group/all insert and
delete actions.

Finally Waffel wrote a jhbuild module set for buzztard [1].

http://www.buzztard.org/index.php/Building#Building_with_Jhbuild

2008/01 ========================================================================

I guess tracker-style music editors have to live with the heritage of tabular
pattern input. Some feature rely heavily on it. FSM started with such a widget
and I integrated it into buzztard. One can still switch between the previous and
the new one by setting a define. The widget works quite nice already. The only
missing feature is native scrolling support. To add that to an own widget
requires an ugly hack. I can't figure why gtk does not use an interface for it.

Patterns in buzz also carry volume and panorama events for the inputs of the
machine. This was totally missing in buzztard. Now we have quite nice support
for it. The volume control works and panorama/balance support is next on the
to-do list. While working on that I made master-machine patterns useful by
allowing to control master-volume,

The sequence view got more commands. Finally one can insert and delete rows in
all columns or only in the current track.

If that wasn't enough, we also did a round of maintenance. All code has been
moved to svn. The buildbot has been extended to build all modules now.
And finally I got around to port the code to not use the deprecated gtk tooltip
API if new gtk is available.

That's a great start for 2008 I'd say!

2007/12 ========================================================================

After porting some simpler machines last month, FSM and myself where looking at
infector. This already is a quite complex generator. Porting as such wasn't that
hard, but unfortunately it did not play. But with the sources at hand we could
figure out what the issues was and fix the problem. It was a generic problem in
the buzzmachine host emulation. This could potentially also make other machines
work. Note to myself - I need to re-test the blacklisted ones.
One outcome of the better machine compatibility is that some of the original
buzz song now plays with some extra manual help.

Some improvements on the UI side also. The spectrum analyzer window is now
re-sizable. We also have a workaround for a gtk+ bug [1], there is now an
accelerator to start playback.

Unfortunately my recent attempts to merge my preset iface [2] to gstreamer got 
stopped again. I need to try harder poking the other developers to review it.

That's it for this month - happy x-mas month to everybody.

[1] http://bugzilla.gnome.org/show_bug.cgi?id=131177
[2] http://bugzilla.gnome.org/show_bug.cgi?id=396779

2007/11 ========================================================================

Very good news for buzz lovers. Recently FSM joined #buzztard irc channel. He
gave us access to his buzzmachine sources and the okay to publish them under
LGPL. One thing that I had on my list for too long was to extend my
buzz-emulation layer to support natively built buzzmachines. Well now its in CVS,
A bml/gstbml rewrite to support native machines + initial 5 machines working.
Means approximately 900 to go. One thing that we still need to be able to port
some machines is a native implementation of buzz's dsplib. We will look into
that next and of course port more machines.

Some small progress also in the UI. I've added track reordering in sequence tab
and keymap independent note entering (y vs z mapping on different key layouts),

2007/10 ========================================================================

Before its getting even later, here is the monthly update. I worked a bit more
on the 'state persistence' - a song now tracks opened machine and analyser
windows. There are restored when loading the song. In continuation of previous
months efforts The machine view got some hot keys now too. 

Now that lcov-1.6 is released, I've added a configure check for it and use the
new options. The new version does not need to be patched anymore to generate
coverage reports for user-space apps. While testing the overage, I also added a
few more tests to increase it.

Waffel has updated our MediaWiki. Now we have opened it again. Unregistered
users have to solve a captcha every time they edit or when they register. I moved
our changes into a separate skin to ease further updates. I have tweaked the css
a bit - more to come if I find good inspiration.

2007/09 ========================================================================

The first big change this month came from berzerka. He wrote midi support for
the interaction controller subsystem. That required some extension of the
classes, specifically adding a learn mechanism. That is you click a machine
property, select learn, touch the midi-controller and done.

One important requirement for a power tool, is having keyboard shortcuts for
almost everything. For the main menu its easy to do so in gtk+. But then we
have context menus and toolbars. So I read API docs and code, wrote test
programs and files bugs and patches [1][2]. The fix for [1] is in svn now, but
the patch in [2] needs review, anyone? Generally the keyboard accelerator
functionality needs some updating, seems that this has been mostly taken from
gtk-1. At least I could not figure out how to e,g. define two accelerator to
e.g. select previous/next item in a combo on a toolbar. Sure most apps won't
need this, but for productivity tools this is quite mandatory. Finally I wonder
what is the policy for the media-keys and how to use them. My gdkkeysyms.h
include does not have symbolic names for them.

While we're talking about gtk, imho the GtkRuler widget is not that esoteric, it
would be quite useful if it would have some bugs fixed [3] and be more
customizable (non-linear scales, more units).

Last month I have started the song-recording UI. The command-line tool already
supported rendering songs to mixdown files. Now there is UI for it too. In
addition to render a mixdown it can also render each track to a separate file.
This is great for postprocessing in a multi-track editor like jokosher [4].
Ideally we could even create a project file for some editors -help is very
welcome. 

This month I also started to look into live song graph editing. Sounds scary?
Its is! GStreamer requires some extra care when adding or removing elements while
playing. I did this now for the wire-analyzer, that plugs spectrum analyzer and
level meter into a wire. With the changes it works reliable now and doe not kill
the playback. Next step is to do this for the song itself too. 

Waffel improved out wiki a bit. We now have geshi extension [5]  installed. This
adds syntax highlighting to sample code. Really nice. 

[1] http://bugzilla.gnome.org/show_bug.cgi?id=469374
[2] http://bugzilla.gnome.org/show_bug.cgi?id=131177
[3] http://bugzilla.gnome.org/show_bug.cgi?id=465041
[4] http://www.jokosher.org
[5] http://www.mediawiki.org/wiki/Extension:GeSHiHighlight

2007/08 ========================================================================

Quite late this month. Our son was born on the 26 of July and this of course
causes some priority shift. Be assure I won't abandon then project. Also
berzerka is back and started hacking on midi control support. Speaking of this,
I did a needed refactoring of the interaction-controller stuff. Controller
assignments wont disappear when closing the dialog anymore and they are now also
saved with the song and restored when loading. I also implemented unbind and
unbind-all commands.
One TODO item is greater ui state persistence [1]. When loading the song should
appear as you left it. One more item for this is done, the active tab is saved.
This is a relative easy one for people that would like to help.

Our testing buildbot is now again up and running. The system had a faulty
battery, which made the clock run way too fast. In seconds the clock was minutes
ahead. I used the occasion to refactor a lot of dialogs into separate classes.
This allows to write some basic unit tests for those and do automated
screenshots as well. Together with some more regular tests, this greatly
increased test coverage. It of course uncovered bugs which we fixed.

As a final step I started with song rendering ui. The ui is not perfect yet, but
it starts to work. It looks like I can prepare a 0.3 quite soon. Yay!

[1] http://www.buzztard.org/index.php/Ui_state_persistence

2007/07 ========================================================================

This month the ui (bt-edit) got improved. Editing pattern became usable - I
advance the cursor, triggers and notes can be editing as usual in a tracker. The
base-octave setting is implemented.

I also worked on the buzz song importer. One goal I set myself is to be able to
load and play some of the song initially shipped with buzz. Right now I try my
luck on Aenathron.bmx. The song is just 34 kbytes, but plays for more that 5
minutes. Geonik's primifun causes some headache for me as it imports a zillion
windows libs, thus I removed it from the song for now. To be able to load the
song I had to add support for old (< version 1.2) songs. The song loads, but
only produces cracks and pops so far :(.

Experimenting with loading various buzz songs also help to improve the machine
compatibility. More machine start to work. I have improved the logging in the
emulation module. the GStreamer buzzmachine wrapper go blacklist support to
disable those that are known to crash.

Unfortunately the recent changes need GStreamer form CVS again. One bug was a
silly copy'n'paste of mine, the other one got fixed by master-hacker Wim Taymans.

What else? More test work has been done. For release 0.3 I'd like to improve the
test coverage. Also kudos to Sebastian Dröge - Google summer of Code student. He
did a great job on the GstController improvements. We now have arbitrary control-
source support with backwards compatibility to the old limited API. A control-
source provides a time variant signal that modifies a GstElement parameter.
Right now there is a interpolation source, that provides a envelope and
triggers. Planned next is a LFO (low frequency oscillator).

2007/06 ========================================================================

Right after releasing 0.2 I hammered CVS with more changes. I fixed a long
standing bug, when request-pads in adder and tee where not handled correctly.
After disconnecting some elements the song never played again. I also added code
to guide format negotiation when using adder - it needs a caps-filter afterwards
that enforces audioconverts after all incoming source to the same format.

In bt-edit I totally rewrote the fake-selection handling in the pattern and
sequence view. I also added a gtk+-version dependent workaround for the cursor
navigation bug. Right now I work on improving the editing in the pattern view.

It was a short month as I also was on holiday in Germany. I rearrange the
release schedule [1] a bit and hope to release another version this summer. It
will improve stability and have some more code cleanups.

[1] http://www.buzztard.org/index.php/Roadmap

2007/05 ========================================================================

Lots of commit and bug tracker activity this month. As we're heading for the 0.2
release I spend most time doing bugfixing. Berzerka discovered that song-saving
was flawed. Editing the patterns did not always took effect. Removing machines
had leaks and ref-count problems. There were some long-standing gtk-warnings.
All fixed in CVS. Finally that loop-playing problem got on my nerves. I was
trying to fix that several times in the past already. Finally I found that it
was a small issue with GStreamers adder element. Many thanks also to Henri
Valta, who contributed several patches. All the new testing also lead to some
new and some re-enabled unit tests.

Beside fixing, I was also working a bit on the features. The interaction
controller now works for input devices (via evdev). I've tested it with a USB
joystick and the harddisk in my laptop (via hdaps). Control devices are detected
via HAL and shown in the menus. One can assign those to effect parameters. Using
the accelerometer in the harddisk, one can control e.g. filter-cut of and
resonance by tilting the laptop - how useless. There is one flaw to mention -
the bindings aren't yet persistent, close the window and there gone.

Finally in gst-buzztard we have a first working version of a fluidsynth
GStreamer source. Josh Green the author of swami [1] made the initial port.

I will now start to prepare the release. Should be out in the coming weeks.

[1] http://swami.resonance.org/trac

2007/04 ========================================================================

LAC 2007 was great. Was nice to meet all these people. The buzztard demo was
well received. I will try to make a screencast of the upnp remote control
feature. I could only demo it there at a second attempt as I didn't received the
wifi router which was needed for the demo. I have put the slides online [1] (if
someone knows how the get rid of the stripes that openoffice 2 produces when
exporting slides with a gradient in the background to pdf, I am listening). For
the slides I updated the architecture picture and put it on the wiki too [2]
The time there was good to fix a lot of small issues. I believe its a good time
to try the project now. If everything goes right we try to release a 0.2 end of
April.

First bigger change is the settings UI. We have icons there for the subpages and
there are two new subpages - for the playback controller (upnp via coherence)
and for the coming interaction controller. The settings of the playback device
is instant apply now (except when playing, it will be switched after stopping).
Speaking of the interaction controller - implementation has started there. This
is one thing I would like to get into 0.2 still. I'll explain in more detail
once it is done.

I also spend lots of time doing maintenance - the api docs have been updated,
extended and uploaded, thanks to some valgrinding sessions some memleaks have
been found and fixed and refdbg helped to track down more ref-count issues.
Also now 'make distcheck' runs through for the first time. Finally I could fix
one xlib warning, which broke playback when playing with realtime effects.

During and after LAC I also spend time to work one small, but annoying things.
First I refactored the missing machines dialog so that it can remember elements
it already warned about. Next items was the level meters, they now are more
reactive and show current as well as peak level. The ui should be a bit more
usable too. The keyboard shortcut for switching between patterns and sequence
(ctrl-enter) was broken. When adding a new src-machines it also creates a track
in sequence automatically. In pattern and sequence view bt-edit shows unused
patterns in gray color (in the menu/list).

Altogether a nice list of fixes and enhancements.

[1] http://www.buzztard.org/files/lac2007_buzztard.pdf
[2] http://www.buzztard.org/index.php/Architecture

2007/03 ========================================================================

February passed really quickly. I was quite busy preparing the FOSDEM talk.
Still I found some time to work on the project. Again I had to hunt some
refcount leaks and it took me days to track them down and fix them. We also had
more testers in the channel and could fix some build problems. Right now I am
working on some features for the LAC 2007 demo in Berlin. For those who can't be
there - I will write more about these new things next month.

Slomo and me are improving the audio plugins in GStreamer. He writes more
elements (like a compressor/expander) and I improved the existing ones to better
support float audio (32 and 64 bit). We now can play some more files and also
need to less often convert.

2007/02 ========================================================================

Last month I started to offer extensions from the buzztard project for gstreamer
inclusion [1][2][3][4]. I believe that the idea behind is generic enough to
support them. The discussion and interest has been relative low so far :( I'll
probably interpret this then as agreement and commit the changes. The preset
handling has been improved. The buzz presets can be saved now too and meta data
(comments) can be edited as well. The generic implementation also shapes up.

As my solution for [5] seems to be disliked I went for a hack :( I now hide the
treeview headers and simulate my own. Now the header widgets work. As some extra
sweetness the header have per track volume meters. While working on this I also
made the label-browser function. It allows to jump to labels in the timeline.
Wanna see how it looks?
<a href="http://www.buzztard.org/index.php/Image:Bt-edit-0.1.0-01.png"><img src="http://www.buzztard.org/images/thumb/2/2a/180px-Bt-edit-0.1.0-01.png"></a>

I also started to add some functionality to the wavetable page. Its now possible
to browse the files and preview the selected entry.

I was curious how well the buzz song import now works. Especially with the
better handling of missing machines. So I added a test script, similar to the
unit test in core, that runs over all your buzz songs, imports them and dumps
basic info into text files. Then it greps the text files to generate most wanted
machine top 10 :).

Last weekend I did a first rough port of buzztard for the N800. I have some of
the UI changes in place already. The GStreamer side was pleasant - no changes
needed. Unfortunately the gstreamer on the device is not the most up to date and
thus the app does not work too well.

[1] http://bugzilla.gnome.org/show_bug.cgi?id=396774
[2] http://bugzilla.gnome.org/show_bug.cgi?id=396779
[3] http://sourceforge.net/mailarchive/forum.php?thread_id=31560403&forum_id=5947
[4] http://sourceforge.net/mailarchive/forum.php?thread_id=31471237&forum_id=5947
[5] http://bugzilla.gnome.org/show_bug.cgi?id=338271

2007/01 ========================================================================

In last month news I wrote about the gst element check. Now we also have the
respective UI parts. The apps check if the have mandatory and optional elements
available. If elements are missing the user will see an explanation which are
missing and what for they are needed. For optional elements its up to the user
to decide if that is okay or if they should be installed. In the future we can
make use of the new gstreamer libgimmicodec mechanism, to download and install
missing elements on the fly.

I also continued working on the preset support. The interface got some default
implementation, e.g. to generate a randomized preset. The buzzmachine wrapper
implements most of the interface. We can load presets, rename and remove them.
The later two actions are not yet persistent - I need to implement saving still.
On the UI side I implemented the preset pane for the machine settings window. I
decided not to copy the buzz UI here. I should post a screenshot soon.

I also went over the todo: comments in the source once again and implemented
things here and there. Now one can add/removed tracks for polyphonic machines.
Also adding/removing tracks in the sequence is now working fine and updates all
UI items properly.

Right now I am also giving the dialogs an overhaul. All got a default action
(e.g. press enter to dismiss). They also get moved into a separate object each.
This helps to test them standalone and to auto-screen-shot them during the test
runs.

Finally I spend some time configuring our buildbot [1]. For the first time all
steps are green. The machine the test run on does not have X11 running. Still we
can run UI tests and do screenshots of all windows. The magic can be found in a
few helper methods that pick a free display number, spawn a Xvfb server and
setup a GdkDisplay for gtk+. The buildbot stuff definitely rocks! I hope we can
extend this in the future - anyone found a way to trigger builds from
sourceforge.net cvs commits (via commit hook)? Make me happy and mailto:
ensonic (at) users (dot) sf (dot) net.

[1] http://141.57.8.70:8010/

2006/12 ========================================================================

This month we fleshed out the planning for 0.2. From now on we like to release
often and regularly. We defined a lot of small gtk UI tasks. If you like to
help, we welcome you with open arms on irc://irc.quakenet.org/#buzztard.

First changes after the release are already in CVS. I worked on the buzzmachine
emulation. I can now handle some more plugins. We need to update and re-run the
coverage tests to get a clear picture. Regarding wrapper gst-elements we have a
bug in gstreamer bugzilla that needs some work [1].

I also worked on the UI a bit more. The machine preferences and properties now
have some reasonable size. Its not easy to get a default size for generated UIs.
Right now I clamp the height to the screen-height minus some extra. Would be
nice to have some way to figure how much space one should leave for upper/lower
panels. I also needed to add a workaround for the window-width wobble. If you
had sliders with labels in the UI, the width was dependent on the label with.I
can't really know the maximum width beforehand easily, so I had to set a default
width. Good enough for now.

I also started two new interfaces for gstreamer elements. First one is about the
help documentation of the element. Buzztard can show the docs of buzzmachines or
the gtk-doc of native element already. The second iface is about the preset
handling. Implementing that for the buzzmachines is next on the todo list.

Finally I also started to put some gstreamer element check into the core lib.
During configure we can't check for installed elements and it wouldn't make
sense anyway. So we are going to check for mandatory and optional elements at
application start. Checking works fine already. Now I need to add the UI dialog
for the missing elements report.

Have a nice christmas month - we'll get back to you next year.

[1] http://bugzilla.gnome.org/show_bug.cgi?id=350477

2006/11 ========================================================================

Finally! We did release 0.1 "genesis". In June 2002 we registered the project
and started thinking. For more than year nothing big happened. In February 2004
the first GStreamer example code landed in CVS. That was using GStreamer 0.8.
Then the metamorphosis began: using GObject, adding unit tests, API docs, user
docs and so on. In August 2005 came the switch to GStreamer 0.10. In summer 2006
our team grew from 2 to 4 developers. The whole project already contains 139000
lines of code.

Even though the current code is maybe a bit rough and the applications are not
that usable yet, we're confident that new releases will follow quickly and bring
the missing pieces. If you want it happen faster, join the project. We have lots
of tasks, some with a fleshed out concept, some merely ideas, some suitable for
not so experienced developers, so quite tricky. Give us a visit on
irc://irc.quakenet.org/buzztard.

2006/10 ========================================================================

Finally I found some time to work one one thing that was getting on my nerves.
For the unit tests we now have a BtTestSettings class. This allows us to
simulate all sort of settings. The other benefit is that we don't need to make
sure that we don't modify user settings during test runs. And we get not hit by
my favourite GConf nastyness anymore [1].

Next I did a lot more bugfixing in the UI - or lets call it implementing
previously unimplemented stuff. Added some more tooltips here and there, syncing
data displays and so on.

Waffel spend some time so set up a buildmaster and a buildslave. This way our
code gets rebuild every 6 hours. The 6 hours cycle has two reasons - our
cvshook-script (from fdo) does not run on sf.net and the sf.net anon-cvs has a
big delay. Anyway even the current setup revealed some bugs, where some of them
are already fixed.

Tommi fights with cairo to build a real pattern editor widget for us. Hope we
can post some screenshots from it soon.

[1] http://bugzilla.gnome.org/show_bug.cgi?id=316331

2006/09 ========================================================================

Lots of news this time. Also this time I welcome another team member on board -
Tommi 'nbd' Sakari Uimonen. His first action was a code review of the core lib
and a big patch that const'ified it more. By giving him a quick demo of the
application we also uncovered a lot of bugs. Next nbd will work on a pattern
editor widget.

Berzerka implemented song-length changing. The list will be dynamically expanded
as one scrolls down. Also keyboard shortcuts are coming to set length and move
the loop area.

While we were working on the sequence display, we fixed the step filtering for
different rhythms and also implemented many details for rhythm support (other
than 4/4). Speaking of the GUI - lots of changes there. The machine view looks a
bit nicer and has some zoom and layout fixes. Zoom fit was a bit harder than
expected and seems to be still not always be correct. The context menu to add
machines is now hierarchical. In the status bar we now show CPU usage. At least
during development this is quite useful.

Lots of code has been added to handle error situations better. If you load songs
with missing machines or samples, these components will be tracked. After
loading we present a report of missing elements. Later we can add machine
download or to specify a new location if the sample has been moved or renamed.

Many task were done to prepare a first release. We now have a nice about dialog.
It also shows the latest release notes. This dialog will always be shown once
after updating. The user guide is more complete. German language catalogues are
complete. Finally a lot of cruft code has been removed.

I also worked a bit on the buzz machine emulation. It now also support stereo
machines (need more work on the application side). The example buzz songs have
been fixed. The now all play again. The gstreamer buzzmachine plugin generates
better parameter names. It also maps some parameters to enums. Instead with a
slider, they are presented as a dropdown then.
