## $Id$

SUBDIRS = libbuzztard-core

if USE_GCONF
GCONF_SETTINGS_SRC = gconf-settings.c libbuzztard-core/gconf-settings.h libbuzztard-core/gconf-settings-methods.h
else
GCONF_SETTINGS_SRC =
endif
if USE_GSF
CONF_SETTINGS_SRC = gconf-settings.c libbuzztard-core/gconf-settings.h libbuzztard-core/gconf-settings-methods.h
else
GCONF_SETTINGS_SRC =
endif

# these sources (also mentioned above) are generated.
BUILT_SOURCES = marshal.h marshal.c

lib_LTLIBRARIES = libbuzztard-core.la
libbuzztard_core_la_LIBADD = $(BASE_DEPS_LIBS) $(BT_LIBS) $(LIBINTL) \
	-lgstaudio-0.10 \
	$(top_builddir)/src/lib/ic/libbuzztard-ic.la
libbuzztard_core_la_LDFLAGS = -version-info @BT_VERSION_INFO@
libbuzztard_core_la_SOURCES = \
	core.c libbuzztard-core/core.h \
	tools.c libbuzztard-core/tools.h \
	libbuzztard-core/version.h \
	buzzcallbacks.c \
	\
	application.c libbuzztard-core/application.h libbuzztard-core/application-methods.h \
	$(GCONF_SETTINGS_SRC) \
	machine.c libbuzztard-core/machine.h libbuzztard-core/machine-methods.h \
	pattern.c libbuzztard-core/pattern.h libbuzztard-core/pattern-methods.h \
	persistence.c libbuzztard-core/persistence.h libbuzztard-core/persistence-methods.h \
	processor-machine.c libbuzztard-core/processor-machine.h libbuzztard-core/processor-machine-methods.h \
	sequence.c libbuzztard-core/sequence.h libbuzztard-core/sequence-methods.h \
	settings.c libbuzztard-core/settings.h libbuzztard-core/settings-methods.h libbuzztard-core/settings-private.h \
	setup.c libbuzztard-core/setup.h libbuzztard-core/setup-methods.h \
	sink-bin.c libbuzztard-core/sink-bin.h libbuzztard-core/sink-bin-methods.h \
	sink-machine.c libbuzztard-core/sink-machine.h libbuzztard-core/sink-machine-methods.h \
	song.c libbuzztard-core/song.h libbuzztard-core/song-methods.h \
	song-info.c libbuzztard-core/song-info.h libbuzztard-core/song-info-methods.h \
	song-io.c libbuzztard-core/song-io.h libbuzztard-core/song-io-methods.h \
	song-io-native.c libbuzztard-core/song-io-native.h libbuzztard-core/song-io-native-methods.h \
	song-io-native-bzt.c libbuzztard-core/song-io-native-bzt.h libbuzztard-core/song-io-native-bzt-methods.h \
	song-io-native-xml.c libbuzztard-core/song-io-native-xml.h libbuzztard-core/song-io-native-xml-methods.h \
	source-machine.c libbuzztard-core/source-machine.h libbuzztard-core/source-machine-methods.h \
	wavetable.c libbuzztard-core/wavetable.h libbuzztard-core/wavetable-methods.h \
	wave.c libbuzztard-core/wave.h libbuzztard-core/wave-methods.h \
	wavelevel.c libbuzztard-core/wavelevel.h libbuzztard-core/wavelevel-methods.h \
	wire.c libbuzztard-core/wire.h libbuzztard-core/wire-methods.h \
	wire-pattern.c libbuzztard-core/wire-pattern.h libbuzztard-core/wire-pattern-methods.h \
	\
	marshal.c

# yet unused sources
#	plainfile-settings.c libbuzztard-core/plainfile-settings.h libbuzztard-core/plainfile-settings-methods.h \
#
#

libbuzztard_core_la_CFLAGS = \
	-I$(top_srcdir)/src/lib/ic \
	-DLOCALEDIR=\"$(localedir)\" \
	-DLIBDIR=\"$(libdir)\" \
	-DDATADIR=\"$(datadir)\" \
	-DG_LOG_DOMAIN=\"buzztard\" \
	$(BASE_DEPS_CFLAGS) \
	$(BT_CFLAGS)

noinst_HEADERS = core_private.h  marshal.h

pkgconfigdir = $(libdir)/pkgconfig
pkgconfig_DATA = libbuzztard-core.pc

marshal.h: marshal.list
	glib-genmarshal --header --prefix=bt_marshal $(srcdir)/marshal.list > marshal.h

marshal.c: marshal.list
	glib-genmarshal --body --prefix=bt_marshal $(srcdir)/marshal.list > marshal.c

if USE_GIR
BuzztardCore-0.0.gir: $(G_IR_SCANNER) libbuzztard-core.la
	-libtool --mode=execute $(G_IR_SCANNER) -v \
	     --namespace BuzztardCore --nsversion 0.0 \
	     --strip-prefix=bt \
	     --add-include-path=$(top_builddir)/src/lib/ic/ \
	     --include=GObject-2.0 \
	     --include=Gst-0.10 \
	     --include=libxml2-2.0 \
	     --include=BuzztardIc-0.0 \
	     --library=buzztard-core \
             --pkg gobject-2.0 \
             --pkg libbuzztard-ic \
             --pkg libgstbuzztard \
             --pkg libxml-2.0 \
             --pkg gstreamer-0.10 \
             --output $@ \
	     -I$(top_srcdir)/src/lib/ic/libbuzztard-ic/ \
	     -I$(srcdir)/libbuzztard_core/ \
	         $(libbuzztard_core_la_SOURCES)
BUILT_GIRSOURCES = BuzztardCore-0.0.gir

girdir = $(datadir)/gir
dist_gir_DATA = $(BUILT_GIRSOURCES)

typelibsdir = $(libdir)/girepository
typelibs_DATA = $(dist_gir_DATA:.gir=.typelib)

TXML = $(dist_gir_DATA:.gir=.gir.txml)

clean-gir:
	@rm -fr $(BUILT_GIRSOURCES)

.gir.typelib:
	-$(G_IR_COMPILER) --includedir=. --includedir=../ic $(G_IR_COMPILER_OPTS) $< -o $@
else
BUILT_GIRSOURCES=
endif
        
EXTRA_DIST = \
	libbuzztard-core.pc.in \
	marshal.list

# CLEANFILES is for files generated by make
CLEANFILES = marshal.c marshal.h $(typelibs_DATA) $(TXML)


.PHONY: help todo stats splint

todo::
	@find . \( -name "*.c" -o -name "*.h" \) -exec grep -Hno "@todo .*" {} \; | sed "s/@todo/error:/"
	@find . \( -name "*.c" -o -name "*.h" \) -exec grep -Hno "@idea .*" {} \; | sed "s/@idea/warning:/"

stats:: tags
	@echo "files by size:"
	@find . \( -name "*.c" -o -name "*.h" \) -printf "%s %p\n" | sort -rn
	@echo
	@echo "files by tags:"
	@for file in *.c; do size=`grep $${file} tags | wc -l`;echo $${size} $${file}; done | sort -rn

splint::
	splint +posixlib -weak -I$(top_builddir) -I$(top_srcdir)/src/lib/ic $(libbtcore_la_SOURCES)

help::
	@echo "make todo                    -- generate a list of TODO items in the form of gcc error/warnings"
	@echo "make stats                   -- run source code stats"
	@echo "make splint                  -- run splint source code checks"
