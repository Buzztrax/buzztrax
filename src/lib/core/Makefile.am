## $Id: Makefile.am,v 1.42 2007-08-03 21:08:14 ensonic Exp $

SUBDIRS = . libbtcore

if USE_GCONF
GCONF_SETTINGS_SRC = gconf-settings.c libbtcore/gconf-settings.h libbtcore/gconf-settings-methods.h
else
GCONF_SETTINGS_SRC =
endif

# these sources (also mentioned above) are generated.
BUILT_SOURCES = marshal.h marshal.c

lib_LTLIBRARIES = libbtcore.la
libbtcore_la_LIBADD = $(BASE_DEPS_LIBS) $(BT_LIBS) -lgstaudio-0.10 \
	$(top_builddir)/src/lib/ic/libbtic.la
libbtcore_la_LDFLAGS = -version-info @BT_VERSION_INFO@
libbtcore_la_SOURCES = \
	core.c libbtcore/core.h \
	tools.c libbtcore/tools.h \
	libbtcore/version.h \
	\
	application.c libbtcore/application.h libbtcore/application-methods.h libbtcore/application-private.h \
	$(GCONF_SETTINGS_SRC) \
	machine.c libbtcore/machine.h libbtcore/machine-methods.h libbtcore/machine-private.h \
	pattern.c libbtcore/pattern.h libbtcore/pattern-methods.h \
	persistence.c libbtcore/persistence.h libbtcore/persistence-methods.h \
	persistence-location.c libbtcore/persistence-location.h \
	persistence-selection.c libbtcore/persistence-selection.h \
	plainfile-settings.c libbtcore/plainfile-settings.h libbtcore/plainfile-settings-methods.h \
	processor-machine.c libbtcore/processor-machine.h libbtcore/processor-machine-methods.h \
	sequence.c libbtcore/sequence.h libbtcore/sequence-methods.h \
	settings.c libbtcore/settings.h libbtcore/settings-methods.h libbtcore/settings-private.h \
	setup.c libbtcore/setup.h libbtcore/setup-methods.h \
	sink-bin.c libbtcore/sink-bin.h libbtcore/sink-bin-methods.h \
	sink-machine.c libbtcore/sink-machine.h libbtcore/sink-machine-methods.h \
	song.c libbtcore/song.h libbtcore/song-methods.h \
	song-info.c libbtcore/song-info.h libbtcore/song-info-methods.h \
	song-io.c libbtcore/song-io.h libbtcore/song-io-methods.h \
	song-io-native.c libbtcore/song-io-native.h libbtcore/song-io-native-methods.h \
	source-machine.c libbtcore/source-machine.h libbtcore/source-machine-methods.h \
	wavetable.c libbtcore/wavetable.h libbtcore/wavetable-methods.h \
	wave.c libbtcore/wave.h libbtcore/wave-methods.h \
	wavelevel.c libbtcore/wavelevel.h libbtcore/wavelevel-methods.h \
	wire.c libbtcore/wire.h libbtcore/wire-methods.h \
	\
	marshal.c marshal.h

INCLUDES = \
	-I$(top_srcdir)/src/lib/ic \
	-DLOCALEDIR=\"$(localedir)\" \
	-DLIBDIR=\"$(libdir)\" \
	-DDATADIR=\"$(datadir)\" \
	-DG_LOG_DOMAIN=\"buzztard\" \
	$(BASE_DEPS_CFLAGS) \
	$(BT_CFLAGS)

pkgconfigdir = $(libdir)/pkgconfig
pkgconfig_DATA = libbtcore.pc

EXTRA_DIST = \
	libbtcore.pc.in \
	marshal.list

# CLEANFILES is for files generated by make
CLEANFILES = marshal.c marshal.h
# DISTCLEANFILES is for files generated by configure
DISTCLEANFILES = libbtcore/version.h

marshal.h: marshal.list
	glib-genmarshal --header --prefix=bt_marshal $(srcdir)/marshal.list > marshal.h.tmp
	mv marshal.h.tmp marshal.h

marshal.c: marshal.list
	echo "#include \"glib-object.h\"" >> marshal.c.tmp
	echo "#include \"marshal.h\"" >> marshal.c.tmp
	glib-genmarshal --body --prefix=bt_marshal $(srcdir)/marshal.list >> marshal.c.tmp
	mv marshal.c.tmp marshal.c


.PHONY: help todo stats splint

todo::
	@find . \( -name "*.c" -o -name "*.h" \) -exec grep -Hno "@todo .*" {} \; | sed "s/@todo/error:/"
	@find . \( -name "*.c" -o -name "*.h" \) -exec grep -Hno "@idea .*" {} \; | sed "s/@idea/warning:/"

stats:: tags
	@echo "files by size:"
	@find . \( -name "*.c" -o -name "*.h" \) -printf "%s %p\n" | sort -rn
	@echo
	@echo "files by tags:"
	@for file in *.c; do size=`grep $${file} tags | wc -l`;echo $${size} $${file}; done | sort -rn

splint::
	splint +posixlib -weak -I$(top_builddir) $(INCLUDES) $(libbtcore_la_SOURCES)

help::
	@echo "make todo                    -- generate a list of TODO items in the form of gcc error/warnings"
	@echo "make stats                   -- run source code stats"
	@echo "make splint                  -- run splint source code checks"
