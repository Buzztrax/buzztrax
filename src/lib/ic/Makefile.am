## $Id$

SUBDIRS = libbuzztard-ic

if USE_LINUX_INPUT
LINUX_INPUT_SOURCES=input-device.c libbuzztard-ic/input-device.h libbuzztard-ic/input-device-methods.h
else
LINUX_INPUT_SOURCES=
endif

lib_LTLIBRARIES = libbuzztard-ic.la
libbuzztard_ic_la_LIBADD = $(BASE_DEPS_LIBS) $(BT_LIBS) $(LIBINTL)
libbuzztard_ic_la_LDFLAGS = -version-info @BT_VERSION_INFO@
libbuzztard_ic_la_SOURCES = \
	ic.c libbuzztard-ic/ic.h \
	libbuzztard-ic/version.h \
	registry.c libbuzztard-ic/registry.h libbuzztard-ic/registry-methods.h \
	\
	device.c libbuzztard-ic/device.h libbuzztard-ic/device-methods.h \
	learn.c libbuzztard-ic/learn.h libbuzztard-ic/learn-methods.h \
	$(LINUX_INPUT_SOURCES) \
	midi-device.c libbuzztard-ic/midi-device.h libbuzztard-ic/midi-device-methods.h \
	\
	control.c libbuzztard-ic/control.h libbuzztard-ic/control-methods.h \
	abs-range-control.c libbuzztard-ic/abs-range-control.h libbuzztard-ic/abs-range-control-methods.h \
	trigger-control.c libbuzztard-ic/trigger-control.h libbuzztard-ic/trigger-control-methods.h
libbuzztard_ic_la_CFLAGS = \
	-I$(top_srcdir)/src/lib/core \
	-DLOCALEDIR=\"$(localedir)\" \
	-DLIBDIR=\"$(libdir)\" \
	-DDATADIR=\"$(datadir)\" \
	-DG_LOG_DOMAIN=\"buzztard\" \
	$(BASE_DEPS_CFLAGS) \
	$(BT_CFLAGS)

noinst_HEADERS = ic_private.h

pkgconfigdir = $(libdir)/pkgconfig
pkgconfig_DATA = libbuzztard-ic.pc

if USE_GIR
BuzztardIc-0.0.gir: $(G_IR_SCANNER) libbuzztard-ic.la
	libtool --mode=execute $(G_IR_SCANNER) -v \
	     --namespace BuzztardIc --nsversion 0.0 \
	     --strip-prefix=btic \
	     --include=GObject-2.0 \
	     --include=Gst-0.10 \
	     --library=buzztard-ic \
             --pkg gobject-2.0 \
             --pkg gstreamer-0.10 \
             --output $@ \
	     -I$(srcdir)/libbuzztard-ic/ \
             $(srcdir)/*.c \
             $(srcdir)/libbuzztard-ic/*.h
BUILT_GIRSOURCES = BuzztardIc-0.0.gir

girdir = $(datadir)/gir
dist_gir_DATA = $(BUILT_GIRSOURCES)

typelibsdir = $(libdir)/girepository
typelibs_DATA = $(dist_gir_DATA:.gir=.typelib)

TXML = $(dist_gir_DATA:.gir=.gir.txml)

clean-gir:
	@rm -fr $(BUILT_GIRSOURCES)

%.typelib: %.gir 
	$(G_IR_COMPILER) --includedir=. $(G_IR_COMPILER_OPTS) $< -o $@
else
BUILT_GIRSOURCES=
endif

EXTRA_DIST = \
	libbuzztard-ic.pc.in

# CLEANFILES is for files generated by make
CLEANFILES = $(typelibs_DATA) $(TXML)

.PHONY: help todo stats splint

todo::
	@find . \( -name "*.c" -o -name "*.h" \) -exec grep -Hno "@todo .*" {} \; | sed "s/@todo/error:/"
	@find . \( -name "*.c" -o -name "*.h" \) -exec grep -Hno "@idea .*" {} \; | sed "s/@idea/warning:/"

stats:: tags
	@echo "files by size:"
	@find . \( -name "*.c" -o -name "*.h" \) -printf "%s %p\n" | sort -rn
	@echo
	@echo "files by tags:"
	@for file in *.c; do size=`grep $${file} tags | wc -l`;echo $${size} $${file}; done | sort -rn

splint::
	splint +posixlib -weak -I$(top_builddir) -I$(top_srcdir)/src/lib/core $(libbtcore_la_SOURCES)

help::
	@echo "make todo                    -- generate a list of TODO items in the form of gcc error/warnings"
	@echo "make stats                   -- run source code stats"
	@echo "make splint                  -- run splint source code checks"
