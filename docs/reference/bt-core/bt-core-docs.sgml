<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY % version-entities SYSTEM "../../version.entities">
%version-entities;
<!ENTITY libcore SYSTEM "xml/libcore.xml">
<!ENTITY BtApplication SYSTEM "xml/btapplication.xml">
<!ENTITY BtGConfSettings SYSTEM "xml/btgconfsettings.xml">
<!ENTITY BtMachine SYSTEM "xml/btmachine.xml">
<!ENTITY BtPattern SYSTEM "xml/btpattern.xml">
<!ENTITY BtPersistence SYSTEM "xml/btpersistence.xml">
<!ENTITY BtPersistenceLocation SYSTEM "xml/btpersistencelocation.xml">
<!ENTITY BtPersistenceSelection SYSTEM "xml/btpersistenceselection.xml">
<!ENTITY BtPlainfileSettings SYSTEM "xml/btplainfilesettings.xml">
<!ENTITY BtProcessorMachine SYSTEM "xml/btprocessormachine.xml">
<!ENTITY BtSequence SYSTEM "xml/btsequence.xml">
<!ENTITY BtSettings SYSTEM "xml/btsettings.xml">
<!ENTITY BtSetup SYSTEM "xml/btsetup.xml">
<!ENTITY BtSinkBin SYSTEM "xml/btsinkbin.xml">
<!ENTITY BtSinkMachine SYSTEM "xml/btsinkmachine.xml">
<!ENTITY BtSong SYSTEM "xml/btsong.xml">
<!ENTITY BtSongInfo SYSTEM "xml/btsonginfo.xml">
<!ENTITY BtSongIO SYSTEM "xml/btsongio.xml">
<!ENTITY BtSongIONative SYSTEM "xml/btsongionative.xml">
<!ENTITY BtSourceMachine SYSTEM "xml/btsourcemachine.xml">
<!ENTITY BtWave SYSTEM "xml/btwave.xml">
<!ENTITY BtWavelevel SYSTEM "xml/btwavelevel.xml">
<!ENTITY BtWavetable SYSTEM "xml/btwavetable.xml">
<!ENTITY BtWire SYSTEM "xml/btwire.xml">

<!ENTITY object-tree-index SYSTEM "xml/tree_index.sgml">
]>
<book id="index">
  <bookinfo>
    <title>Buzztard Bt-Core Reference Manual</title>
    <releaseinfo>for Buzztard &BT_VERSION;</releaseinfo>
  </bookinfo>

  <preface>
    <title>Introduction</title>
    <para>
      Buzztard aims to be a successor of the freeware music tracker called Buzz.
      The development of Buzz has been discontinued as the author lost all his source-codes.
    </para>
    <para>
      The homepage of the buzztard project can be found at <ulink href="http://www.buzztard.org">www.buzztard.org</ulink>.
      It is based on a wiki and used to draft further development.
    </para>
  </preface>

  <chapter id="conventions">
    <title>Conventions</title>
    During the API docs some conventions are used to avoid duplication and
    improve precision.
    <orderedlist>
      <listitem>
        <para>
          It is never valid to supply <symbol>NULL</symbol> for an object
          reference,unless it is explicitly said so.
        </para>
      </listitem>
      <listitem>
        <para>
          Methods do checking of preconditions using <function>g_return_if_fail()</function>
          or <function>g_return_val_if_fail()</function>.
          Therefore watch for the glib log messages indicating wrong API usage.
        </para>
      </listitem>
      <listitem>
        <para>
          All methods that return a pointer to an object, increase the reference counter.
          Therefore you should do release this reference by calling <function>g_object_unref()</function>
          when you are done with the object.
        </para>
      </listitem>
      <listitem>
        <para>
          When a return value is marked as <type>const</type> e.g. <type>const gchar *</type>
          or <type>const BtObjectName *</type> then this is a static reference.
          You must not call <function>g_free()</function> or <function>g_object_unref()</function>
          on it.
        </para>
      </listitem>
    </orderedlist>
  </chapter>
  
  <chapter id="libbtcore">
    <title>Core Library Reference</title>
    <para>
      libbtcore is the main library for the buzztard software system.
      This library contains all classes needed for songs like
      machines, patterns, wires and so on.
      It further defines bases classes for common operations such as
      song input/output.
      Please make sure you have read section <link linkend="conventions">conventions</link>
      before reading further.
    </para>
    <para>
      All data structures are encapsulated in objects based on <link linkend="GObject">GObject</link>.
      Central starting points are <link linkend="BtApplication">BtApplication</link> and <link linkend="BtSong">BtSong</link>.
      All the objects that belong to a song have their song-instance as their member.
      Likewise all objects that belong to the applications have their application instance as a member.
    </para>
    &BtApplication;
    &BtGConfSettings;
    &BtMachine;
    &BtPattern;
    &BtPersistence;
    &BtPersistenceLocation;
    &BtPersistenceSelection;
    &BtPlainfileSettings;
    &BtProcessorMachine;
    &BtSequence;
    &BtSettings;
    &BtSetup;
    &BtSinkBin;
    &BtSinkMachine;
    &BtSong;
    &BtSongInfo;
    &BtSongIO;
    &BtSongIONative;
    &BtSourceMachine;
    &BtWave;
    &BtWavelevel;
    &BtWavetable;
    &BtWire;
  </chapter>

  <chapter id="objecttree">
    <title>Object Hierarchy</title>
    &object-tree-index;
  </chapter>

  <index id="api-index">
    <title>API Index</title>
  </index>

</book>
