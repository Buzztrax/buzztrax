//$Id: objects.txt,v 1.5 2004-05-04 15:24:53 ensonic Exp $ :mode=c:collapseFolds=1:folding=indent:
//==============================================================================

// to find out which types exist do
// grep -o "#define BT_[A-Z]*_TYPE" src/lib/core/libbtcore/*.h

BTMachine {	// no interface, but base-class

	// public methods
	void bt_machine_mute(BtMachinePtr machine);

}

BTSourceMachine extends BTMachine {
}

BTProcessorMachine extends BTMachine {
}

BTSinkMachine extends BTMachine {
}

BTWire { // was BTConnection
}

BTSong {
	// metadata
	     gchar* name;
  BTSequence* sequence;
	   BTSetup* setup;

	// public methods
	BtSongPtr bt_song_new(void)
	BtSongPtr bt_song_new_from_file(gchar *file_name);
       void bt_song_destroy(BtSongPtr song);
			 
	  GstBin* bt_song_get_bin(BtSongPtr song);
	     void bt_song_set_master(BtSongPtr song, BtMachinePtr master);
			 
	 gboolean bt_song_play(BtSongPtr song);
   gboolean bt_song_stop(BtSongPtr song);
}

BTSequence {
	GList *rows;	// row with pattern id per track
}

BTSetup {
	GList *machines;	// each entry points to BTMachine
	GList *wires;			// each entry points to BTWire
}

BTPattern {
	GValue[ticks][params] events;
}

BTTimeLine {
	BTPattern* patterns;
	      ???* event;
}

//------------------------------------------------------------------------------


BTSong *mysong=g_object_new(BT_SONG,NULL);
bt_song_load("~/songs.song.bt);
bt_song_import("~/songs.song.bmx);

// creating a new wire between two machines
wire=g_object_new(BT_WIRE,"song",mysong,"src",machine1,"dst",machine2);
// the constructor of BT_WIRE adds the new instance to mysong->setup->wires
//  -> this is not working as we can't rely upon the construction parameters (src,dst)
wire=g_object_new(BT_WIRE,"song",mysong);
// the constructor remembers the ref to the song
bt_wire_connect(wire,machine1,machine2);
// this methods initializes the wire and adds it to wire->song->setup->wires
// -> it needs to g_assert(wire->song);
